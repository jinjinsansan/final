import React, { useState, useEffect } from 'react';
import { Calendar, LineChart, Share2, Download, Filter, RefreshCw, TrendingUp } from 'lucide-react';

// Êó•‰ªò„ÇíÊ≠£Ë¶èÂåñ„Åô„ÇãÈñ¢Êï∞ÔºàÊôÇÈñìÈÉ®ÂàÜ„ÇíÂâäÈô§„Åó„Å¶Êó•‰ªò„ÅÆ„Åø„Å´„Åô„ÇãÔºâ
const normalizeDate = (dateString: string): Date => {
  const date = new Date(dateString);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
};

// Êó•Êú¨ÊôÇÈñì„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
const getJapaneseDate = (): Date => {
  const now = new Date();
  const japanOffset = 9 * 60 * 60 * 1000;
  const japanTime = new Date(now.getTime() + japanOffset);
  return japanTime;
};

interface InitialScore {
  selfEsteemScore: number | string;
  worthlessnessScore: number | string;
  measurementMonth: string;
  measurementDay: string;
}

interface EmotionCount {
  emotion: string;
  count: number;
}

interface ChartData {
  date: string;
  selfEsteemScore: number | string;
  worthlessnessScore: number | string;
}

const WorthlessnessChart: React.FC = () => {
  const [chartData, setChartData] = useState<ChartData[]>([]);
  const [period, setPeriod] = useState<'week' | 'month' | 'all'>('week');
  const [loading, setLoading] = useState(true);
  const [allEmotionCounts, setAllEmotionCounts] = useState<{[key: string]: number}>({});
  const [filteredEmotionCounts, setFilteredEmotionCounts] = useState<{[key: string]: number}>({});
  const [emotionCounts, setEmotionCounts] = useState<EmotionCount[]>([]);
  const [initialScore, setInitialScore] = useState<InitialScore | null>(null);

  useEffect(() => {
    loadChartData();
  }, [period]);

  const loadChartData = () => {
    setLoading(true);
    try {
      // Êó•Êú¨ÊôÇÈñì„ÇíÂèñÂæó
      const japanToday = getJapaneseDate();
      
      // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÊó•Ë®ò„Éá„Éº„Çø„ÇíÂèñÂæó
      const now = new Date();
      const normalizedToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      
      const savedInitialScores = localStorage.getItem('initialScores');
      const savedEntries = localStorage.getItem('journalEntries');
      
      // ÂàùÊúü„Çπ„Ç≥„Ç¢„ÇíÂèñÂæó
      if (savedInitialScores) {
        try {
          const parsedInitialScores = JSON.parse(savedInitialScores);
          setInitialScore(parsedInitialScores);
        } catch (error) {
          console.error('ÂàùÊúü„Çπ„Ç≥„Ç¢Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
      }
      
      if (savedEntries) {
        const entries = JSON.parse(savedEntries);
        
        console.log('ÂÖ®„Ç®„É≥„Éà„É™„ÉºÊï∞:', entries.length);
        
        // ÁÑ°‰æ°ÂÄ§ÊÑü„ÅÆÊó•Ë®ò„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        const worthlessnessEntries = filterByPeriod(entries, period, normalizedToday)
          .sort((a: any, b: any) => normalizeDate(a.date).getTime() - normalizeDate(b.date).getTime());
        
        console.log('ÁÑ°‰æ°ÂÄ§ÊÑü„Ç®„É≥„Éà„É™„ÉºÊï∞:', worthlessnessEntries.length, 'ÊúüÈñì:', period);
        // Êó•Ë®ò„Éá„Éº„Çø„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        let formattedData = worthlessnessEntries.map((entry: any) => ({
          date: entry.date,
          selfEsteemScore: typeof entry.selfEsteemScore === 'number' ? entry.selfEsteemScore : 
                          (typeof entry.selfEsteemScore === 'string' ? parseInt(entry.selfEsteemScore) : 0),
          worthlessnessScore: typeof entry.worthlessnessScore === 'number' ? entry.worthlessnessScore : 
                             (typeof entry.worthlessnessScore === 'string' ? parseInt(entry.worthlessnessScore) : 0)
        }));
        
        console.log('„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂæå„ÅÆ„Éá„Éº„Çø:', formattedData);
        
        // ÂàùÊúü„Çπ„Ç≥„Ç¢„ÇíËøΩÂä†ÔºàÂÖ®ÊúüÈñìË°®Á§∫„ÅÆÂ†¥Âêà„ÄÅ„Åæ„Åü„ÅØ‰ªñ„ÅÆÊúüÈñì„Åß„Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
        if (initialScore && period === 'all') {
          // ÂàùÊúü„Çπ„Ç≥„Ç¢„ÅÆÊó•‰ªò„Çí‰ΩúÊàêÔºàÊúÄÂàù„ÅÆÊó•Ë®ò„ÅÆÂâçÊó•Ôºâ
          const firstEntryDate = formattedData.length > 0 
            ? new Date(formattedData[0].date)
            : normalizedToday; // „Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ‰ªäÊó•„ÅÆÊó•‰ªò„Çí‰ΩøÁî®
          firstEntryDate.setDate(firstEntryDate.getDate() - 1);
          const initialScoreDate = firstEntryDate.toISOString().split('T')[0];
          
          // ÂàùÊúü„Çπ„Ç≥„Ç¢„ÅåÊó¢„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
          const hasInitialScore = false; // Â∏∏„Å´ÂàùÊúü„Çπ„Ç≥„Ç¢„ÇíËøΩÂä†
          
          console.log('ÂàùÊúü„Çπ„Ç≥„Ç¢:', initialScore);
          console.log('ÂàùÊúü„Çπ„Ç≥„Ç¢„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã:', hasInitialScore);
          
          if (!hasInitialScore) {
            // ÂàùÊúü„Çπ„Ç≥„Ç¢„Çí„Éá„Éº„Çø„ÅÆÂÖàÈ†≠„Å´ËøΩÂä†
            formattedData = [{
              date: initialScoreDate || '2025-01-01',
              selfEsteemScore: typeof initialScore.selfEsteemScore === 'number' ? initialScore.selfEsteemScore : 
                              (typeof initialScore.selfEsteemScore === 'string' ? parseInt(initialScore.selfEsteemScore) : 50),
              worthlessnessScore: typeof initialScore.worthlessnessScore === 'number' ? initialScore.worthlessnessScore : 
                                 (typeof initialScore.worthlessnessScore === 'string' ? parseInt(initialScore.worthlessnessScore) : 50)
            }, ...formattedData];
          }
        }
        
        setChartData(formattedData);
        
        console.log('ÊúÄÁµÇÁöÑ„Å™„ÉÅ„É£„Éº„Éà„Éá„Éº„Çø:', formattedData);
        
        // ÂÖ®ÊúüÈñì„ÅÆÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞„ÇíÈõÜË®à
        const counts: {[key: string]: number} = {};
        entries?.forEach((entry: any) => {
          counts[entry.emotion] = (counts[entry.emotion] || 0) + 1;
        });
        setAllEmotionCounts(counts);
        
        // ÈÅ∏Êäû„Åï„Çå„ÅüÊúüÈñì„ÅÆÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞„ÇíÈõÜË®à
        const filteredCounts: {[key: string]: number} = {};
        const filteredAllEntries = filterByPeriod(entries, period, normalizedToday);
        filteredAllEntries?.forEach((entry: any) => {
          filteredCounts[entry.emotion] = (filteredCounts[entry.emotion] || 0) + 1;
        });
        setFilteredEmotionCounts(filteredCounts);
        
        // ÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞„ÇíÈÖçÂàó„Å´Â§âÊèõ„Åó„Å¶„ÇΩ„Éº„Éà
        const currentCounts = period === 'all' ? counts : filteredCounts;
        const sortedEmotionCounts = Object.entries(currentCounts)
          .map(([emotion, count]) => ({ emotion, count: count as number }))
          .sort((a, b) => b.count - a.count);
        
        setEmotionCounts(sortedEmotionCounts);
      }
    } catch (error) {
      console.error('„ÉÅ„É£„Éº„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    } finally {
      setLoading(false);
    }
  };

  const filterByPeriod = (entries: any[], selectedPeriod: string, today: Date) => {
    if (!entries || entries.length === 0) {
      return [];
    }
    
   // ÁÑ°‰æ°ÂÄ§ÊÑü„ÅÆÊó•Ë®ò„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
   const worthlessnessEntries = entries.filter((entry: any) => entry.emotion === 'ÁÑ°‰æ°ÂÄ§ÊÑü');
   
    let result = [];
    
    switch (selectedPeriod) {
      case 'week':
        const weekAgo = new Date(today);
        weekAgo.setDate(weekAgo.getDate() - 7);
       result = worthlessnessEntries.filter((entry: any) => {
          const entryDate = normalizeDate(entry.date);
          return entryDate >= weekAgo;
        });
        break;
      
      case 'month':
        const monthAgo = new Date(today);
        monthAgo.setDate(monthAgo.getDate() - 30);
       result = worthlessnessEntries.filter((entry: any) => {
          const entryDate = normalizeDate(entry.date);
          return entryDate >= monthAgo;
        });
        break;
      
      case 'all':
      default:
       result = worthlessnessEntries;
        break;
    }
    
    // Êó•‰ªò„Åß„ÇΩ„Éº„Éà
    result.sort((a: any, b: any) => normalizeDate(a.date).getTime() - normalizeDate(b.date).getTime());
    
    console.log(`${selectedPeriod}ÊúüÈñì„ÅÆ„Éï„Ç£„É´„Çø„ÉºÁµêÊûú:`, result.length, '‰ª∂');
    return result;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return `${date.getMonth() + 1}/${date.getDate()}`;
  };

  const handleShare = () => {
    if (chartData.length === 0) {
      alert('ÂÖ±Êúâ„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      return;
    }
    
    const username = localStorage.getItem('line-username') || '„É¶„Éº„Ç∂„Éº';
    const latestData = chartData[chartData.length - 1];
    
    let shareText = `${username}„ÅÆÁÑ°‰æ°ÂÄ§ÊÑüÊé®Áßª üìä\n\n`;
    shareText += `üîµ Ëá™Â∑±ËÇØÂÆöÊÑü: ${latestData?.selfEsteemScore || 0}\n`;
    shareText += `üî¥ ÁÑ°‰æ°ÂÄ§ÊÑü: ${latestData?.worthlessnessScore || 0}\n\n`;
    
    // ÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞
    const currentEmotionCounts = period === 'all' ? allEmotionCounts : filteredEmotionCounts;
    if (emotionCounts.length > 0) {
      shareText += `„ÄêÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞„Äë\n`;
      emotionCounts.slice(0, 3).forEach(item => {
        shareText += `${item.emotion}: ${item.count}Âõû\n`;
      });
    }
    
    shareText += `\n#„Åã„Çì„Åò„Çá„ÅÜ„Å´„Å£„Åç #ÊÑüÊÉÖÊó•Ë®ò #Ëá™Â∑±ËÇØÂÆöÊÑü\n\nhttps://apl.namisapo2.love/`;
    
    if (navigator.share) {
      navigator.share({
        title: '„Åã„Çì„Åò„Çá„ÅÜ„Å´„Å£„Åç - ÁÑ°‰æ°ÂÄ§ÊÑüÊé®Áßª',
        text: shareText,
      }).catch((error) => {
        console.log('„Ç∑„Çß„Ç¢„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü:', error);
      });
    } else {
      navigator.clipboard.writeText(shareText).then(() => {
        alert('„Ç∑„Çß„Ç¢Áî®„ÉÜ„Ç≠„Çπ„Éà„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ\nSNS„Å´Ë≤º„Çä‰ªò„Åë„Å¶„Ç∑„Çß„Ç¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }).catch(() => {
        prompt('‰ª•‰∏ã„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Çí„Ç≥„Éî„Éº„Åó„Å¶SNS„Åß„Ç∑„Çß„Ç¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ:', shareText);
      });
    }
  };

  const handleTwitterShare = () => {
    if (chartData.length === 0) {
      alert('ÂÖ±Êúâ„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      return;
    }
    
    const username = localStorage.getItem('line-username') || '„É¶„Éº„Ç∂„Éº';
    const latestData = chartData[chartData.length - 1];
    
    let shareText = `${username}„ÅÆÁÑ°‰æ°ÂÄ§ÊÑüÊé®Áßª üìä\n\n`;
    shareText += `üîµ Ëá™Â∑±ËÇØÂÆöÊÑü: ${latestData?.selfEsteemScore || 0}\n`;
    shareText += `üî¥ ÁÑ°‰æ°ÂÄ§ÊÑü: ${latestData?.worthlessnessScore || 0}\n\n`;
    
    // ÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞
    const currentEmotionCounts = period === 'all' ? allEmotionCounts : filteredEmotionCounts;
    if (emotionCounts.length > 0) {
      shareText += `„ÄêÊÑüÊÉÖ„ÅÆÂá∫ÁèæÂõûÊï∞„Äë\n`;
      emotionCounts.slice(0, 3).forEach(item => {
        shareText += `${item.emotion}: ${item.count}Âõû\n`;
      });
    }
    
    shareText += `\n#„Åã„Çì„Åò„Çá„ÅÜ„Å´„Å£„Åç #ÊÑüÊÉÖÊó•Ë®ò #Ëá™Â∑±ËÇØÂÆöÊÑü\n\nhttps://apl.namisapo2.love/`;
    
    const encodedShareText = encodeURIComponent(shareText);
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodedShareText}`;
    
    window.open(twitterUrl, '_blank');
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6 px-2">
      <div className="bg-white rounded-xl shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-jp-bold text-gray-900">ÁÑ°‰æ°ÂÄ§ÊÑüÊé®Áßª</h1>
          <div className="flex space-x-2">
            <button
              onClick={handleShare}
              className="flex items-center space-x-2 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-jp-medium transition-colors"
            >
              <Share2 className="w-4 h-4" />
              <span className="hidden sm:inline">„Ç∑„Çß„Ç¢</span>
            </button>
            <button
              onClick={handleTwitterShare}
              className="flex items-center space-x-2 px-3 py-2 bg-black hover:bg-gray-800 text-white rounded-lg text-sm font-jp-medium transition-colors"
            >
              <svg className="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
              </svg>
              <span className="hidden sm:inline">X„Åß„Ç∑„Çß„Ç¢</span>
            </button>
          </div>
        </div>

        {/* ÊúüÈñì„Éï„Ç£„É´„Çø„Éº */}
        <div className="flex space-x-2 mb-6">
          <button
            onClick={() => setPeriod('week')}
            className={`px-4 py-2 rounded-lg text-sm font-jp-medium transition-colors ${
              period === 'week'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            1ÈÄ±Èñì
          </button>
          <button
            onClick={() => setPeriod('month')}
            className={`px-4 py-2 rounded-lg text-sm font-jp-medium transition-colors ${
              period === 'month'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            1„É∂Êúà
          </button>
          <button
            onClick={() => setPeriod('all')}
            className={`px-4 py-2 rounded-lg text-sm font-jp-medium transition-colors ${
              period === 'all'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            ÂÖ®ÊúüÈñì
          </button>
        </div>

        {/* „ÉÅ„É£„Éº„ÉàË°®Á§∫„Ç®„É™„Ç¢ */}
        {loading ? (
          <div className="bg-gray-50 rounded-lg p-12 flex items-center justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          </div>
        ) : chartData.length === 0 ? (
          <div className="bg-gray-50 rounded-lg p-12 text-center">
            <TrendingUp className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-jp-medium text-gray-500 mb-2">
              „Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì
            </h3>
            <p className="text-gray-400 font-jp-normal">
              ÁÑ°‰æ°ÂÄ§ÊÑü„ÇíÈÅ∏„Çì„Å†Êó•Ë®ò„ÇíÊõ∏„Åè„Å®„Ç∞„É©„Éï„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô
            </p>
          </div>
        ) : (
          <div className="space-y-6">
            {/* „Ç∞„É©„Éï */}
            <div className="bg-white rounded-lg p-4 border border-gray-200 overflow-x-auto relative">
              {initialScore && period === 'all' && (
                <div className="absolute top-2 left-2 bg-blue-50 rounded-lg p-2 border border-blue-200 text-xs">
                  <span className="font-jp-medium text-blue-800">ÂàùÊúü„Çπ„Ç≥„Ç¢Ë°®Á§∫‰∏≠</span>
                </div>
              )}
              <div className="min-w-[600px]">
                <div className="flex justify-between items-center mb-4">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                      <span className="text-sm font-jp-medium text-gray-700">Ëá™Â∑±ËÇØÂÆöÊÑü</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                      <span className="text-sm font-jp-medium text-gray-700">ÁÑ°‰æ°ÂÄ§ÊÑü</span>
                    </div>
                  </div>
                  <div className="text-xs text-gray-500">
                    {period === 'week' ? 'ÈÅéÂéª7Êó•Èñì' : period === 'month' ? 'ÈÅéÂéª30Êó•Èñì' : 'ÂÖ®ÊúüÈñì'}
                  </div>
                </div>
                
                {/* „Ç∞„É©„ÉïÊú¨‰Ωì */}
                <div className="h-64 relative mb-8">
                  {/* YËª∏ */}
                  <div className="absolute left-0 top-0 bottom-0 w-10 flex flex-col justify-between text-xs text-gray-500">
                    <div className="transform -translate-y-2">100</div>
                    <div className="transform -translate-y-2">75</div>
                    <div className="transform -translate-y-2">50</div>
                    <div className="transform -translate-y-2">25</div>
                    <div className="transform -translate-y-2">0</div>
                  </div>
                  
                  {/* „Ç∞„É©„Éï„Ç®„É™„Ç¢ */}
                  <div className="absolute left-10 right-0 top-0 bottom-0 px-2">
                    {/* Ê∞¥Âπ≥Á∑ö */}
                    <div className="absolute left-0 right-0 top-0 h-px bg-gray-200"></div>
                    <div className="absolute left-0 right-0 top-1/4 h-px bg-gray-200"></div>
                    <div className="absolute left-0 right-0 top-1/2 h-px bg-gray-200"></div>
                    <div className="absolute left-0 right-0 top-3/4 h-px bg-gray-200"></div>
                    <div className="absolute left-0 right-0 bottom-0 h-px bg-gray-200"></div>
                    
                    {/* Êäò„ÇåÁ∑ö„Ç∞„É©„Éï */}
                    <div className="h-full relative">
                      {/* Ëá™Â∑±ËÇØÂÆöÊÑü„ÅÆÊäò„ÇåÁ∑ö */}
                      <svg className="absolute inset-0 w-full h-full overflow-visible">
                        <polyline
                          points={chartData.length > 0 
                            ? chartData.map((data, index) => {
                                const xPos = chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50;
                                const yPos = 100 - Number(data.selfEsteemScore || 0);
                                return `${xPos}% ${yPos}%`;
                              }).join(' ')
                            : ''
                          }
                          fill="none"
                          stroke="#3b82f6"
                          strokeWidth="2"
                          strokeLinejoin="round"
                          strokeLinecap="round"
                        />
                        {chartData.map((data, index) => {
                          const xPos = chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50;
                          const yPos = 100 - Number(data.selfEsteemScore);
                          return (
                            <circle
                              key={`self-esteem-${index}`}
                              cx={`${chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50}%`}
                              cy={`${100 - Number(data.selfEsteemScore || 0)}%`}
                              r="4"
                              fill="#3b82f6"
                              stroke="white"
                              strokeWidth="1"
                              className={`${index === 0 && period === 'all' && initialScore ? 'ring-2 ring-blue-300' : ''}`}
                            >
                              <title>Ëá™Â∑±ËÇØÂÆöÊÑü: {data.selfEsteemScore}</title>
                            </circle>
                          );
                        })}
                      </svg>
                      
                      {/* ÁÑ°‰æ°ÂÄ§ÊÑü„ÅÆÊäò„ÇåÁ∑ö */}
                      <svg className="absolute inset-0 w-full h-full overflow-visible">
                        <polyline
                          points={chartData.length > 0 
                            ? chartData.map((data, index) => {
                                const xPos = chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50;
                                const yPos = 100 - Number(data.worthlessnessScore || 0);
                                return `${xPos}% ${yPos}%`;
                              }).join(' ')
                            : ''
                          }
                          fill="none"
                          stroke="#ef4444"
                          strokeWidth="2"
                          strokeLinejoin="round"
                          strokeLinecap="round"
                        />
                        {chartData.map((data, index) => {
                          const xPos = chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50;
                          const yPos = 100 - Number(data.worthlessnessScore);
                          return (
                            <circle
                              key={`worthlessness-${index}`}
                              cx={`${chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50}%`}
                              cy={`${100 - Number(data.worthlessnessScore || 0)}%`}
                              r="4"
                              fill="#ef4444"
                              stroke="white"
                              strokeWidth="1"
                              className={`${index === 0 && period === 'all' && initialScore ? 'ring-2 ring-red-300' : ''}`}
                            >
                              <title>ÁÑ°‰æ°ÂÄ§ÊÑü: {data.worthlessnessScore}</title>
                            </circle>
                          );
                        })}
                      </svg>
                    </div>
                    
                    {/* XËª∏„É©„Éô„É´ */}
                    <div className="absolute left-0 right-0 bottom-[-24px] flex justify-between">
                      {chartData.map((data, index) => (
                        <div key={index} className="text-xs text-gray-500 transform -translate-x-1/2" style={{ left: `${chartData.length > 1 ? (index / (chartData.length - 1)) * 100 : 50}%` }}>
                          {index === 0 && period === 'all' && initialScore 
                            ? 'ÂàùÊúü' 
                            : formatDate(data.date)}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* ÊúÄÊñ∞„Çπ„Ç≥„Ç¢ */}
            {chartData.length > 0 && (
              <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-jp-bold text-gray-900">ÊúÄÊñ∞„Çπ„Ç≥„Ç¢</h3>
                  <div className="text-xs text-gray-500">
                    {formatDate(chartData[chartData.length - 1].date)}
                  </div>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="bg-white rounded-lg p-4 border border-blue-200">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-700 font-jp-medium">Ëá™Â∑±ËÇØÂÆöÊÑü</span>
                      <span className="text-2xl font-jp-bold text-blue-600">
                        {chartData[chartData.length - 1].selfEsteemScore}
                      </span>
                    </div>
                  </div>
                  <div className="bg-white rounded-lg p-4 border border-red-200">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-700 font-jp-medium">ÁÑ°‰æ°ÂÄ§ÊÑü</span>
                      <span className="text-2xl font-jp-bold text-red-600">
                        {chartData[chartData.length - 1].worthlessnessScore}
                      </span>
                    </div>
                  </div>
                </div>
                
                {initialScore && period === 'all' && (
                  <div className="mt-4 pt-4 border-t border-blue-200">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-jp-medium text-gray-900">ÂàùÊúü„Çπ„Ç≥„Ç¢</h4>
                      <div className="text-xs text-gray-500">
                        {initialScore.measurementMonth}Êúà{initialScore.measurementDay}Êó•
                      </div>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="bg-white rounded-lg p-3 border border-blue-100">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-700 font-jp-medium text-sm">Ëá™Â∑±ËÇØÂÆöÊÑü</span>
                          <span className="text-xl font-jp-bold text-blue-600">
                            {initialScore.selfEsteemScore}
                          </span>
                        </div>
                      </div>
                      <div className="bg-white rounded-lg p-3 border border-red-100">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-700 font-jp-medium text-sm">ÁÑ°‰æ°ÂÄ§ÊÑü</span>
                          <span className="text-xl font-jp-bold text-red-600">
                            {initialScore.worthlessnessScore}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {/* ÊÑüÊÉÖ„ÅÆÂá∫ÁèæÈ†ªÂ∫¶ */}
            {emotionCounts.length > 0 && (
              <div className="bg-purple-50 rounded-lg p-6 border border-purple-200">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-jp-bold text-gray-900">ÊÑüÊÉÖ„ÅÆÂá∫ÁèæÈ†ªÂ∫¶</h3>
                  <div className="text-xs text-gray-500">
                    {period === 'week' ? 'ÈÅéÂéª7Êó•Èñì' : period === 'month' ? 'ÈÅéÂéª30Êó•Èñì' : 'ÂÖ®ÊúüÈñì'}
                  </div>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                  {emotionCounts.map((item, index) => (
                    <div key={index} className="bg-white rounded-lg p-3 border border-gray-200">
                      <div className="text-center">
                        <div className="text-lg font-jp-bold text-gray-900 mb-1">{item.emotion}</div>
                        <div className="text-sm text-gray-600">{item.count}Âõû</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default WorthlessnessChart;